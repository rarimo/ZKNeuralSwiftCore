// The Swift Programming Language
// https://docs.swift.org/swift-book

import Foundation
import ZkNeuralRustCoreLib

/// Configuration used to initialize `ZKNeuralCore`.
public struct ZKNeuralCoreConfiguration {
    public let generateWitnessCallback: GenerateWitnessCallback
    public let generateProofCallback: GenerateProofCallback
}

/// A class that provides functionality to generate zero-knowledge proofs.
public class ZKNeuralCore {
    private let configuration: ZKNeuralCoreConfiguration
    private let innerCore: OpaquePointer!

    /// Initializes a new instance of `ZKNeuralCore` with the provided configuration.
    ///
    /// - Parameters:
    ///   - configuration: An instance of `ZKNeuralCoreConfiguration` containing the callbacks for generating witness and proof.
    public init(
        configuration: ZKNeuralCoreConfiguration
    ) {
        self.configuration = configuration
        self.innerCore = rs_zkneural_new()

        rs_zkneural_set_generate_witness_callback(innerCore, configuration.generateWitnessCallback)
        rs_zkneural_set_generate_proof_callback(innerCore, configuration.generateProofCallback)
    }

    /// Generates a zero-knowledge proof based on the provided input JSON, circuit, and zkey.
    ///
    /// - Parameters:
    ///   - inputJson: The inputs for circuit in JSON.
    ///   - circuit: Circuit data generated by circom compiler.
    ///   - zkey: The zkey used for generating the proof.
    ///
    /// - Returns: Zk Proof serialized in JSON
    public func generateZkProof(
        _ inputJson: Data,
        _ circuit: Data,
        _ zkey: Data
    ) throws -> Data {
        let wtns = try withRustResult {
            rs_zkneural_generate_witness(
                innerCore,
                (circuit as NSData).bytes,
                .init(circuit.count),
                (inputJson as NSData).bytes,
                .init(circuit.count)
            )
        }

        return try withRustResult {
            rs_zkneural_generate_proof(
                innerCore,
                (zkey as NSData).bytes,
                .init(zkey.count),
                (wtns as NSData).bytes,
                .init(wtns.count)
            )
        }
    }

    deinit {
        rs_zkneural_free(innerCore)
    }
}

/// A class that provides functionality to invoke a neural network model using tensors.
public class TensorInvoker {
    private let invoker: OpaquePointer!

    /// Initializes a new instance of `TensorInvoker` with the provided model data in TFLite format.
    ///
    /// - Parameters:
    ///   - modelData: The model data in TFLite format.
    public init(_ modelData: Data) {
        self.invoker = rs_zkneural_tensor_invoker_new(
            (modelData as NSData).bytes,
            .init(modelData.count)
        )
    }

    /// Invokes the neural network model with the provided image.
    ///
    /// - Parameters:
    ///   - imageData: The image data to be processed by the model.
    ///
    /// - Returns: The output data from the model invocation in JSON Format.
    public func fireImage(_ imageData: Data) throws -> Data {
        try withRustResult {
            rs_zkneural_tensor_invoker_image_fire(
                self.invoker,
                (imageData as NSData).bytes,
                .init(imageData.count)
            )
        }
    }

    deinit {
        rs_zkneural_tensor_invoker_free(invoker)
    }
}
